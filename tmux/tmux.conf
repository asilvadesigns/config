set -sg terminal-overrides ",*:RGB"
set -g default-terminal "${TERM}"
set -g escape-time 0
set -g history-limit 10000

# Set mouse support
set -g mouse on

# Set focus-events on (important for Neovim autoread)
set -g focus-events on

# Set windows and pane index at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

set -g prefix C-Space
unbind-key C-b
bind-key C-Space send-prefix

set -g allow-rename off
set -g mouse on
set-option -g allow-passthrough on

# Movements
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# bind-key -n S-Down if-shell "$is_vim" 'send-keys S-Down' 'resize-pane -D 3'
# bind-key -n S-Left if-shell "$is_vim" 'send-keys S-Left' 'resize-pane -L 3'
# bind-key -n S-Right if-shell "$is_vim" 'send-keys S-Right' 'resize-pane -R 3'
# bind-key -n S-Up if-shell "$is_vim" 'send-keys S-Up' 'resize-pane -U 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Quickly Clear History
bind-key C if-shell "$is_vim" 'display-message "cannot clear"' 'send-keys -R; clear-history; send-keys "Enter"'

# Toggle status bar | use "set -g" for global
bind-key S if -F '#{==:#{status},off}' 'set status on' 'set status off'

# Toggle terminal
bind ` if-shell "test $(tmux list-panes | wc -l) -eq 1" "split-window -v" "select-pane -t:.+"

# Quickly Reload
bind r source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"

# Message bar
set -g message-style 'fg=#ffffff bg=red'

# Status Bar
set -g pane-active-border-style 'bg=default fg=cyan'
set -g pane-border-lines single
set -g status on # turn it off by default or off
set -g status-interval 15 #could speed this up to 1
set -g status-justify left # absolute-centre
set -g status-left ''
set -g status-left-length 100
set -g status-position bottom # or top, bottom

# NOTE: the brightness calculation is derived from the
# "weighted brightness formula" for percieved luminance
set -g status-right "#( \
  s=\$(tmux display-message -p '#S'); \
  hash=\$(echo \$s | sha1sum | cut -c1-6); \
  r=\$((0x\${hash:0:2})); \
  g=\$((0x\${hash:2:2})); \
  b=\$((0x\${hash:4:2})); \
  brightness=\$(( (r * 299 + g * 587 + b * 114) / 1000 )); \
  [ \$brightness -gt 170 ] && fg=black || fg=#ffffff; \
  echo \"#[bg=#\$hash fg=\$fg] \$s \" \
)"

# THEME: solarized-light
set -g pane-border-style 'bg=default fg=lightgray'
set -g status-style 'bg=#eee8d5, fg=default'

# THEME: vscode-light
set -g pane-border-style 'bg=default fg=lightgray'
set -g status-style 'bg=#ebebeb, fg=default'

# THEME: catppuccin-frappe | atom one dark
# set -g pane-border-style 'bg=default fg=#414559'
# set -g status-style 'bg=#414559 fg=default'

set -g automatic-rename on
# set -g automatic-rename-format "#{=|-15|...:#{pane_current_command}}"
set -g window-status-current-format '#[fg=default,bold]  #{?window_name,#W,#{pane_current_command}}'
set -g window-status-format '#[fg=default]  #{?window_name,#W,#{pane_current_command}}'
set -g window-status-separator ' '

# Window split
unbind '"'
unbind %
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

set -g popup-border-style fg=cyan
set -g popup-border-lines rounded

# Session Manager
unbind "k"
bind-key "k" display-popup \
  -w 60 \
  -h 20 \
  -E "sesh connect $(sesh list | gum filter)"
