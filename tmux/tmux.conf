# Set true color
set -ag terminal-overrides ",$TERM:RGB"
set -s escape-time 0

# set italics support
set -g default-terminal "tmux-256color"

# Set mouse support
set -g mouse on

# Set focus-events on (important for Neovim autoread)
set -g focus-events on

# Set windows and pane index at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

set -g prefix C-Space

set -g allow-rename off
set -g mouse on
set-option -g allow-passthrough on

# Movements
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# bind-key -n S-Down if-shell "$is_vim" 'send-keys S-Down' 'resize-pane -D 3'
# bind-key -n S-Left if-shell "$is_vim" 'send-keys S-Left' 'resize-pane -L 3'
# bind-key -n S-Right if-shell "$is_vim" 'send-keys S-Right' 'resize-pane -R 3'
# bind-key -n S-Up if-shell "$is_vim" 'send-keys S-Up' 'resize-pane -U 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Quickly Clear History
# bind-key C if-shell "$is_vim" 'display-message "cannot clear"' 'send-keys "clear && tmux clear-history" Enter'
bind-key C if-shell "$is_vim" 'display-message "cannot clear"' 'send-keys -R; clear-history; send-keys "Enter"'

# Quickly Reload
bind r source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"

# Status Bar
set -g status-interval 1
set -g status-justify left
set -g status-left ' '
set -g status-position top
set -g status-right "#(echo #{pane_current_path} | sed 's#$HOME#~#g') "
# set -g status off

# Status Bar | Dark
# set -g status-style 'bg=#292c3c, fg=#737994'
# set -g pane-border-style 'bg=default fg=#292c3c'
# Status Bar | Light
set -g status-style 'bg=#e6e9ef, fg=#9ca0b0'
set -g pane-border-style 'bg=default fg=#e6e9ef'

set -g automatic-rename on

# set -g automatic-rename-format '#{b:pane_current_path}'
# set -g window-status-current-format '#[fg=blue]ÔÑë #W'
# set -g window-status-format 'Û∞ù¶ #W'
set -g window-status-current-format '#[fg=blue]ÔÑë #I #{pane_current_command}'
set -g window-status-format 'ÔÑë #I #{pane_current_command}'

set -g window-status-separator '   '
set -g pane-active-border-style 'bg=default fg=cyan'

# Window split
unbind '"'
unbind %
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Plugins Manager
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins'

# Session Manager
unbind "k"
bind-key "k" run-shell "sesh connect $(
    sesh list -tz | fzf-tmux -p 55%,60% \
    --reverse --no-sort --border-label ' sesh ' --prompt '‚ö°  ' \
    --header '  ^a all ^t tmux ^x zoxide ^f find' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list)' \
    --bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t)' \
    --bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z)' \
    --bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)'
    )"
    

# Set Plugins
# use prefix + I to install.
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tpm'

run '~/.tmux/plugins/tpm/tpm'
