-- quickly get filetype
vim.api.nvim_create_user_command('GetFiletype', function()
  print("Filetype is ::'" .. vim.bo.filetype .. "'")
end, {})

-- NOTE: keep playing around
-- local tbl_length = function(T)
--   local count = 0
--   for _ in pairs(T) do count = count + 1 end
--   return count
-- end
--
-- local get_visual_selection = function()
--   -- this will exit visual mode
--   -- use 'gv' to reselect the text
--   local _, csrow, cscol, cerow, cecol
--   local mode = vim.fn.mode()
--   if mode == "v" or mode == "V" or mode == "" then
--     -- if we are in visual mode use the live position
--     _, csrow, cscol, _ = unpack(vim.fn.getpos("."))
--     _, cerow, cecol, _ = unpack(vim.fn.getpos("v"))
--     if mode == "V" then
--       -- visual line doesn't provide columns
--       cscol, cecol = 0, 999
--     end
--     -- exit visual mode
--     vim.api.nvim_feedkeys(
--       vim.api.nvim_replace_termcodes("<Esc>",
--         true, false, true), "n", true)
--   else
--     -- otherwise, use the last known visual position
--     _, csrow, cscol, _ = unpack(vim.fn.getpos("'<"))
--     _, cerow, cecol, _ = unpack(vim.fn.getpos("'>"))
--   end
--   -- swap vars if needed
--   if cerow < csrow then csrow, cerow = cerow, csrow end
--   if cecol < cscol then cscol, cecol = cecol, cscol end
--   local lines = vim.fn.getline(csrow, cerow)
--   -- local n = cerow-csrow+1
--   local n = tbl_length(lines)
--   if n <= 0 then return "" end
--   lines[n] = string.sub(lines[n], 1, cecol)
--   lines[1] = string.sub(lines[1], cscol)
--   return table.concat(lines, "\n")
-- end
--
-- -- search for highlighted text
-- vim.api.nvim_create_user_command("SearchHighlight", function()
--   local selected_text = get_visual_selection()
--   -- local args = { ... }
--   -- local selected_text = vim.fn.getreg('"') -- Get the contents of the unnamed register (selected text)
--   -- if args[1] then                          -- If an argument is provided, use it as the search pattern
--   --   selected_text = args[1]
--   -- end
--   -- selected_text = tostring(selected_text)           -- Escape '/' characters
--   -- selected_text = vim.fn.escape(selected_text, '/') -- Escape '/' characters
--   print('search for...' .. selected_text)
--   -- vim.cmd('execute "normal! /' .. selected_text .. '"')
--   vim.fn.search(selected_text)                      -- Perform the search
-- end, {
--   nargs = "?",                    -- Specifies that the command can take an optional argument
--   range = "%",                    -- Specifies that the command can be used with a range (e.g., :10,15SearchHighlight)
--   complete = "customlist,search", -- Specifies custom completion for the command
-- })
--
-- vim.api.nvim_set_keymap('v', '<C-s>', ':SearchHighlight<CR>', { noremap = true })
