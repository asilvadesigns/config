    --- This goes in init
    {
      "nvim-lualine/lualine.nvim",
      event = "VeryLazy",
      opts = {
        disabled_filetypes = {
          statusline = { "NvimTree", "snacks_dashboard" },
          winbar = { "NvimTree", "snacks_dashboard" },
        },
        sections = {},
        inactive_sections = {},
        winbar = {
          lualine_a = { { "filename", path = 0, color = "Normal" } },
        },
        inactive_winbar = {
          lualine_a = { { "filename", path = 0, color = "NonText" } },
        },
      },
    },
    {
      "ibhagwan/fzf-lua",
      enabled = false,
      cmd = { "FzfLua" },
      keys = {
        {
          "<leader>a",
          function()
            ---@class Entry
            ---@field cmd string | fun(): nil
            ---@type table<string, Entry>
            local commands = {
              ["Commands"] = { cmd = "FzfLua commands" },
              ["Copy file path (Absolute)"] = { cmd = "CopyAbsolutePath" },
              ["Copy file path (Relative)"] = { cmd = "CopyRelativePath" },
              ["Copy filetype"] = { cmd = "CopyFiletype" },
              ["Diagnostics"] = { cmd = "Trouble diagnostics" },
              ["Find Lines"] = { cmd = "FzfLua blines" },
              ["Find Word"] = { cmd = "FzfLua grep_project" },
              ["Format (Biome)"] = { cmd = "FormatWithBiome" },
              ["Format (Prettier)"] = { cmd = "FormatWithPrettier" },
              ["Format (default)"] = { cmd = "Format" },
              ["Git (Fugitive)"] = { cmd = "Git" },
              ["Git (Neogit)"] = { cmd = "Neogit" },
              ["Help"] = { cmd = "FzfLua helptags" },
              ["Highlights"] = { cmd = "FzfLua highlights" },
              ["Keymaps"] = { cmd = "FzfLua keymaps" },
              ["Lazy"] = { cmd = "Lazy" },
              ["Lint (Biome)"] = { cmd = "LintWithBiome" },
              ["Lint (EsLint)"] = { cmd = "LintWithPrettier" },
              ["Lint (default)"] = { cmd = "Lint" },
              ["Load Session"] = { cmd = "LoadSession" },
              ["Mason"] = { cmd = "Mason" },
              ["Markdown Preview"] = { cmd = "MarkdownPreviewToggle" },
              ["Noice dismiss"] = { cmd = "Noice dismiss" },
              ["Noice messages"] = { cmd = "Noice fzf" },
              ["Open (Finder)"] = { cmd = "!open ." },
              ["Quit force"] = { cmd = "qa!" },
              ["Rename File"] = { cmd = "RenameFile" },
              ["Restart LSP"] = { cmd = "LspRestart" },
              ["Save"] = { cmd = "wa" },
              ["Save and quit force"] = { cmd = "wqa!" },
              ["Search"] = { cmd = "Spectre" },
              ["Search (local)"] = { cmd = "GrugFarLocal" },
              ["Search (global)"] = { cmd = "GrugFar" },
              ["Symbols"] = { cmd = "FzfLua lsp_document_symbols" },
              ["Symbols (Workspace)"] = { cmd = "FzfLua lsp_workspace_symbols" },
              ["Buf Only"] = { cmd = "only|bd|e#" },
              ["Tab Close"] = { cmd = "tabclose" },
              ["Tab New"] = { cmd = "tabnew" },
              ["Tab Next"] = { cmd = "tabnext" },
              ["Tab Only"] = { cmd = "tabonly" },
              ["Tab Previous"] = { cmd = "tabprevious" },
              ["Todos Quickfix"] = { cmd = "TodoLocList" },
              ["Trouble"] = { cmd = "Trouble" },
              ["Zen Mode (no neck pain)"] = { cmd = "NoNeckPain" },
              ["Zen Mode (decrease)"] = { cmd = "NoNeckPainWidthDown" },
              ["Zen Mode (increase)"] = { cmd = "NoNeckPainWidthUp" },
            }

            local keys = {}
            local n = 0
            for k, _ in pairs(commands) do
              n = n + 1
              keys[n] = k
            end

            require("fzf-lua").fzf_exec(keys, {
              actions = {
                ["enter"] = function(selected)
                  if selected and selected[1] then
                    local meta = commands[selected[1]]

                    if type(meta.cmd) == "function" then
                      meta.cmd()
                    elseif type(meta.cmd) == "string" then
                      vim.cmd(meta.cmd)
                    end
                  end
                end,
              },
            })
          end,
        },
        {
          "<leader>b",
          function()
            require("fzf-lua").buffers()
          end,
        },
        {
          "<leader>e",
          function()
            require("fzf-lua").oldfiles()
          end,
        },
        {
          "<leader>f",
          function()
            require("fzf-lua").files()
          end,
        },
        {
          "<leader>l",
          function()
            require("fzf-lua").blines()
          end,
        },
      },
      config = require("config.plugins.fzflua").setup,
    },

